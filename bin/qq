#!/usr/bin/env bash
# Elegant wrapper for nix{os} utils to make
# system manage easier


function run {
    [[ -n $DRYRUN ]] && echo "$@" || "$@"
}


function get_hostname() {
    local arch
    local os

    arch="$(uname -m)"

    if [[ "${arch}" == "x86_64" ]]; then
        os="$(cat /etc/os-release | grep "^NAME=" | cut -d = -f 2)"
        [ "${os}" == "NixOS" ] && HOST_TYPE="nixos" || HOST_TYPE = "linux"
    else
        HOST_TYPE="android"
    fi

    case "${HOST_TYPE}" in
        "nixos") HOST=$(hostname) ;;
        "linux") HOST=linux ;;
        "android") HOST=one ;;
    esac
}


function search_flake() {
    local search_path=(/etc/nixos "${HOME}/dotfiles")

    for dir in "${search_path[@]}" ; do
        if [[ -f "$dir/flake.nix" ]]; then
            FLAKE=$dir
            break
        fi
    done

    if [[ -z "${FLAKE}" ]]; then
        >&2 echo "Coudn't find flake"
        exit 1
    fi
}


function rebuild_machine() {
    if [[ "${HOST_TYPE}" == "nixos" ]]; then
        run noti sudo nixos-rebuild switch --flake "${FLAKE}#${HOST}"
    else
        run noti nix build --experimental-features \
            "nix-command flakes" "${FLAKE}#${HOST}"
        run ./result/activate
    fi
}


function update() {
    if [[ "$@" ]]; then
        for flake in $@; do
            run noti nix flake update "$flake" "$FLAKE"
        done
    else
        run noti nix flake update  "$FLAKE"
    fi
}


function collect_garbage() {
    local days=$1
    local gc_args

    [[ -n "$days" ]] && gc_args="--delete-older-than ${days}d" || gc_args="-d"
    run noti sudo nix-collect-garbage ${gc_args}

    run noti nix-store --optimise
}


function get_hash() {
    local url

    if [[ $1 == "GITHUB" ]]; then 
        local owner_repo="$2"
        local rev="$3"

        url="https://github.com/${owner_repo}/archive/${rev}.tar.gz"
    else
        url=$1
    fi

    run noti nix-prefetch-url --unpack "${url}"
}


function print_usage() {
    local script_name=$(basename "$0")
    cat <<-EOF
USAGE:
$script_name [FLAGS] [subcommand] [args]

Subcommands:
    r|rebuild
    gc|collect_garbage [days]
    u|update [input]
    up|upgrade
    h|hash url
    ghh|github_hash owner/repo rev
EOF
}


while true; do
    case "$1" in
        -f|--flake) FLAKE=$2; shift 2;;
        -h|--host) HOST=$2; shift 2;;
        -d|--dryrun) DRYRUN=1; shift;;
        *) break ;;
    esac
done


[[ -n $FLAKE ]] || search_flake
[[ -n $HOST ]] || get_hostname
cd $FLAKE


case "$1" in
    r|rebuild) shift; rebuild_machine ;;
    gc|collect_garbage) shift; collect_garbage "$@" ;;
    u|update) shift; update "$@" ;;
    up|upgrade)
        update;
        rebuild_machine ;;
    h|hash) shift; get_hash "$@";;
    ghh|github_hash) shift; get_hash GITHUB "$@";;
    *) print_usage ;;
esac

exit 0
